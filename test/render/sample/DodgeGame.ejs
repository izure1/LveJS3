<!DOCTYPE HTML>
<html>

<head>
  <title></title>
  <link rel="stylesheet" href="/css/common.css">
  <meta charset="utf-8">
  <script type="text/javascript" src="/LveJS.js"></script>
</head>

<body>
  <canvas id="test" width="1200" height="850"></canvas>
  <script type="text/javascript">
    const gamename = 'LveJS_dodgeGame'
    const lve = new LveJS

    let highscore = getHighScore()
    let isGameover = false

    function getRandomInt(min, max) {
      return Math.floor(Math.random() * (max - min + 1)) + min
    }

    function createBall(i = 0) {

      let radius
      let r, g, b
      let x

      setTimeout(() => {

        x = getRandomInt(-600, 600)
        r = getRandomInt(0, 255)
        g = getRandomInt(0, 255)
        b = getRandomInt(0, 255)
        radius = getRandomInt(50, 60)

        i -= 1

        if (i < 100) {
          i = 100
        }

        lve(`ball_${getRandomInt(Number.MIN_SAFE_INTEGER, Number.MAX_SAFE_INTEGER)}`).create({
          type: 'image',
          src: '/image/poop.gif'
        }).css({
          width: radius,
          height: radius,
          color: 'gray',
          left: x,
          bottom: 1000,
        }).attr({
          physics: 'dynamic',
          gravityscale: 0.2,
          restitution: 2
        }).addClass('ball')

        createBall(i)

      }, i)

    }

    function updateScore() {

      lve.extendDrawEnd(function () {

        let score

        score = performance.now() / 10
        score = ~~score

        if (score > highscore) {
          highscore = score
          lve('highscore').attr('text', highscore)
        }

        lve('score').attr('text', score)

      })

    }

    function updateWind(interval) {

      lve.setGravity(getRandomInt(-7, 7), -9.8)

      setTimeout(() => {
        updateWind(interval)
      }, interval)

    }

    function updateGround(interval) {

      lve('ground').animate({
        rotate: getRandomInt(-25, 25)
      }, 1000)

      setTimeout(() => {
        updateGround(interval)
      }, interval)

    }

    function setHighScore(score) {
      localStorage.setItem(gamename, score)
    }

    function getHighScore() {
      return localStorage.getItem(gamename) || 0
    }

    function gameover() {

      if (isGameover) {
        return
      }

      isGameover = true

      lve('camera').animate({

        perspective: 50

      }, 3000, 'easeOutExpo').follow('character', {

        left: 0,
        bottom: 0

      })

      lve('character').css('color', 'red').animate({
        opacity: 0.3
      }, 3000, 'easeOutExpo')

      setTimeout(() => {

        let score

        score = lve('score').attr('text') - 0

        setHighScore(highscore)
        alert(`Game over!\n\nYour score is ${score}`)

        location.reload()

      }, 3000)

    }

    function setKeyControl() {

      // Keyboard Controler
      lve.extendEnd(() => {

        // if you want show all key codes, try use 'console.log(lve.current.keyboard)'

        // press left key
        if (lve.current.keyboard.LEFT.isDown) {
          lve('character').sprite('name', 'left').play().applyForce(-500, 0)
        }
        // press right key
        else if (lve.current.keyboard.RIGHT.isDown) {
          lve('character').sprite('name', 'right').play().applyForce(500, 0)
        }
        // stop
        else {
          lve('character').sprite('name', 'stop').play()
        }

        // mouse check...
        if (lve.current.mouse.LEFT.isDown) {
          console.log('Down LEFT button')
        }
        if (lve.current.mouse.WHEEL.isDown) {
          console.log('Down WHEEL button')
        }
        if (lve.current.mouse.RIGHT.isDown) {
          console.log('Down RIGHT button')
        }

      })

    }

    function createPlatform() {

      lve('ground').create({
        type: 'square'
      }).css({
        width: 1400,
        height: 25,
        color: '#A5F2F3',
        bottom: 50
      }).attr({
        physics: 'static',
        friction: 0.2
      }).addClass('block')

      lve('deathline').create({
        type: 'square'
      }).css({
        width: Number.MAX_SAFE_INTEGER,
        height: 10000,
        bottom: -1000,
        verticalAlign: 'bottom'
      }).attr({
        physics: 'static'
      }).addClass('block melt')

      lve('wall-left').create({
        type: 'square'
      }).css({
        width: 5,
        height: 1000,
        color: '#ddd',
        left: -600
      }).attr({
        physics: 'static',
        restitution: 1.2
      }).addClass('block wall')

      lve('wall-right').create({
        type: 'square'
      }).css({
        width: 5,
        height: 1000,
        color: '#ddd',
        left: 600
      }).attr({
        physics: 'static',
        restitution: 1.2
      }).addClass('block wall')

    }

    function createScore() {

      lve('score').create({
        type: 'text',
        text: '0'
      }).css({
        fontSize: 40,
        fontWeight: 'bold',
        color: 'white',
        borderWidth: 10,
        borderColor: '#0075c8',
        left: 30,
        bottom: 800,
        position: 'fixed'
      })

      lve('highscore').create({
        type: 'text',
        text: highscore
      }).css({
        fontSize: 20,
        fontWeight: 'bold',
        color: 'white',
        borderWidth: 5,
        borderColor: 'red',
        left: 30,
        bottom: 750,
        position: 'fixed'
      })

    }
  </script>
  <script>
    lve.init({
      canvas: '#test',
      backgroundColor: '#252525'
    }).setBaseURL('/image/').loadAsset([
      'mummy.png',
      'poop.gif',
    ]).ready(() => {

      // Create colliders
      lve.createCollider('block', 'character')
      lve.createCollider('ball', 'character')
      lve.createCollider('ball', 'wall')


      // Create Sprite motions
      lve.createSprite('left', '/image/mummy.png', {
        frame: 36,
        start: 17,
        end: 0,
        fps: 17 * 4
      })

      lve.createSprite('right', '/image/mummy.png', {
        frame: 36,
        start: 18,
        end: 35,
        fps: 17 * 4
      })

      lve.createSprite('stop', '/image/mummy.png', {
        frame: 36,
        start: 14,
        end: 14,
      })


      // Setting camera
      lve('camera').css('bottom', 400)

      createPlatform()
      createScore()


      lve('character').create({
        type: 'sprite'
      }).css({
        width: 'auto',
        height: 60,
        bottom: 160,
      }).attr({
        physics: 'dynamic',
        friction: 1,
        density: 1,
        fixedrotation: true
      }).addClass('character').sprite('name', 'stop').play()

      lve.on('contactstart', e => {

        if (e.target.name === 'character') {

          // ball hit
          if (e.another.hasClass('ball') && !e.another.hasClass('melting')) {
            gameover()
          }
          // dropped
          else if (e.another.name === 'deathline') {
            gameover()
          }

        }

        // melt ball
        else if (e.target.hasClass('ball')) {

          if (e.another.hasClass('melt')) {
            e.target.fadeOut(300)
            setTimeout(() => e.target.remove(), 300)
          }

        }

      })

    }).start(setKeyControl)
  </script>
  <script>
    createBall(300)
    updateScore()
    updateWind(5000)
    updateGround(8000)
  </script>
</body>

</html>